from pjscan.cache.prefetch_task import *
class CallDeclTask(AbstractPrefetchTask):
    def __init__(self,**kwargs):
        analysis_framework = kwargs.pop('analysis_framework',None)
        cache_graph = kwargs.pop('cache_graph',None)
        super(CallDeclTask,self).__init__(analysis_framework = analysis_framework,cache_graph = cache_graph)
        self.node = kwargs.pop('node',None)

    def do_task(self):
        if self.cache_graph.customize_storage['call_decl'].get(self.node[NODE_INDEX],None) != None and\
            self.cache_graph.customize_storage['call_decl'][self.node[NODE_INDEX]].get(self.node[NODE_INDEX]['taint_var'],None) != None :
            return
        result = []
        if self.node['taint_var'] != '':
            if self.node[NODE_TYPE] not in [TYPE_CALL, TYPE_METHOD_CALL, TYPE_STATIC_CALL,TYPE_NEW]:
                call_nodes = self.analysis_framework.filter_ast_child_nodes(
                    self.node,
                    node_type_filter=[TYPE_CALL, TYPE_METHOD_CALL, TYPE_STATIC_CALL,TYPE_NEW]
                )
            else:
                call_nodes = [self.node]
            for call_node in call_nodes:
                arg_list = self.get_all_arg_var(call_node)
                for key in arg_list.keys():
                    if key == f"${self.node['taint_var']}":
                        result_node = self.match_CG_dataflow(call_node,arg_list[key])
                        result.extend(result_node)
        if self.cache_graph.customize_storage['call_decl'].get(self.node[NODE_INDEX],None) == None:
            self.cache_graph.customize_storage['call_decl'][self.node[NODE_INDEX]] = {}
        self.cache_graph.customize_storage['call_decl'][self.node[NODE_INDEX]][self.node[NODE_INDEX]['taint_var']] = result

class PDGUseTask(AbstractPrefetchTask):
    def __init__(self,**kwargs):
        cache_graph = kwargs.pop('cache_graph',None)
        super(PDGUseTask,self).__init__(cache_graph = cache_graph)
        self.node = kwargs.pop('node',None)
    def do_task(self):
        if self.cache_graph.get_pdg_outflow == None:
            rels = self.analysis_framework.neo4j_graph.relationships.match(nodes=[self.node, None], r_type=DATA_FLOW_EDGE, ).all()
            self.cache_graph.add_pdg_outflow(self.node, rels, source='prefetch')


